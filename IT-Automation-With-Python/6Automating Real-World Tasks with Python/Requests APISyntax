#https://requests.readthedocs.io/
#https://requests.readthedocs.io/en/master/api/#requests.Response
#https://requests.readthedocs.io/en/latest/api/#requests.Response.text
#https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml
"""
The Python Requests library makes it super easy to write programs that send and receive HTTP. Instead of having to understand the HTTP protocol in
great detail, you can just make very simple HTTP connections using Python objects, and then send and receive messages using the methods of those 
objects. Let's look at an example:  
"""
>>> import requests
>>> response = requests.get('https://www.google.com')

#gets HTML document as a single line up to :300 character
>>> print(response.text[:300])
<!doctype html><html itemscope="" itemtype="http://schema.org/WebPage" lang="de"><head><meta content="text/html; charset=UTF-8" http-equiv="Content-Type"><meta content="/images/branding/googleg/1x/googleg_standard_color_128dp.png" itemprop="image"><title>Google</title><script nonce="dZfbIAn803LDGXS9

#gets raw response up to :100 characters machine code The response was compressed with gzip, so it had to be decompressed before we could even read the text of the HTML.
>>> response = requests.get('https://www.google.com', stream=True)
>>> print(response.raw.read()[:100])
b'\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xc5Z\xdbz\x9b\xc8\x96\xbe\xcfS`\xf2\xb5-\xc6X\x02$t\xc28\xe3v\xdc\xdd\xee\xce\xa9\xb7\xdd;\xe9\x9d\xce\xf6W@\t\x88\x11`@>D\xd6\x9b\xce\xe5<\xc3\\\xcd\xc5\xfc\xab8\x08\xc9Nz\x1f.&\x8e1U\xb5j\xd5:\xfc\xb5jU\x15\x87;^\xe2\x16\xf7)\x97\x82b\x1e\x1d\x1d\xd2S'

#makes above code readable
>>> response.request.headers['Accept-Encoding']
'gzip, deflate'

#server told us that the content had actually been compressed.  
>>> response.headers['Content-Encoding']
'gzip'

#How do we know if a request we made got a successful response? You can check out the value of Response.ok, which will be True if the response was good, and False if it wasn't.  
>>> response.ok
True

#If the boolean isn’t specific enough for your needs, you can get the HTTP response code that was returned by looking at Response.status_code:  
>>> response.status_code
200

#raises an error message if response.ok is false and prints status code
response = requests.get(url)
if not response.ok:
    raise Exception("GET failed with status code {}".format(response.status_code))
    
#But you don't really need to do that. Requests has us covered here, too! We can use the Response.raise_for_status() method, which will raise an HTTPError exception only if the response wasn’t successful.  
response = requests.get(url)
response.raise_for_status()

"""HTTP GET and POST Methods"""
#A GET request can have parameters. 
#The question mark separates the URL resource from the resource's parameters. These parameters are one or more key-value pairs, formatted as a query string. 
#the search parameter is set to "grey+kitten", and the max_results parameter is set to 15.
https://example.com/path/to/api/cat_pictures?search=grey+kitten&max_results=15

# With requests.get(), you can provide a dictionary of parameters, and the Requests module will construct the correct URL for you!  
>>> p = {"search": "grey kitten",
...      "max_results": 15}
>>> response = requests.get("https://example.com/path/to/api", params=p)
>>> response.request.url
'https://example.com/path/to/api?search=grey+kitten&max_results=15'

#An alternative in that case is using the HTTP POST method. This method sends, or posts, data to a web service. 
#Whenever you fill a web form and press a button to submit, you're using the POST method to send that data back to the web server.
#In our scripts, a POST request looks very similar to a GET request. Instead of setting the params attribute, which gets turned into a query string and appended to the URL, we use the data attribute, 
>>> p = {"description": "white kitten",
...      "name": "Snowball",
...      "age_months": 6}
>>> response = requests.post("https://example.com/path/to/api", data=p)
#Let's check out the generated URL for this request: 
>>> response.request.url
'https://example.com/path/to/api'
#See how much simpler the URL is on this POST now? Where did all of the parameters go? They’re part of the body of the HTTP message. We can see them by checking out the body attribute.  
>>> response.request.body
'description=white+kitten&name=Snowball&age_months=6'

#So, if we need to send and receive data from a web service, we can turn our data into dictionaries and then pass that as the data attribute of a POST request.
#Today, it's super common to send and receive data specifically in JSON format, so the Requests module can do the conversion directly for us, using the json parameter.  
>>> response = requests.post("https://example.com/path/to/api", json=p)
>>> response.request.url
'https://example.com/path/to/api'
>>> response.request.body
b'{"description": "white kitten", "name": "Snowball", "age_months": 6}' 

