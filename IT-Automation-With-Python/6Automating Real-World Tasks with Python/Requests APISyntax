#https://requests.readthedocs.io/
#https://requests.readthedocs.io/en/master/api/#requests.Response
#https://requests.readthedocs.io/en/latest/api/#requests.Response.text
#https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml
"""
The Python Requests library makes it super easy to write programs that send and receive HTTP. Instead of having to understand the HTTP protocol in
great detail, you can just make very simple HTTP connections using Python objects, and then send and receive messages using the methods of those 
objects. Let's look at an example:  
"""
>>> import requests
>>> response = requests.get('https://www.google.com')

#gets HTML document as a single line up to :300 character
>>> print(response.text[:300])
<!doctype html><html itemscope="" itemtype="http://schema.org/WebPage" lang="de"><head><meta content="text/html; charset=UTF-8" http-equiv="Content-Type"><meta content="/images/branding/googleg/1x/googleg_standard_color_128dp.png" itemprop="image"><title>Google</title><script nonce="dZfbIAn803LDGXS9

#gets raw response up to :100 characters machine code The response was compressed with gzip, so it had to be decompressed before we could even read the text of the HTML.
>>> response = requests.get('https://www.google.com', stream=True)
>>> print(response.raw.read()[:100])
b'\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xc5Z\xdbz\x9b\xc8\x96\xbe\xcfS`\xf2\xb5-\xc6X\x02$t\xc28\xe3v\xdc\xdd\xee\xce\xa9\xb7\xdd;\xe9\x9d\xce\xf6W@\t\x88\x11`@>D\xd6\x9b\xce\xe5<\xc3\\\xcd\xc5\xfc\xab8\x08\xc9Nz\x1f.&\x8e1U\xb5j\xd5:\xfc\xb5jU\x15\x87;^\xe2\x16\xf7)\x97\x82b\x1e\x1d\x1d\xd2S'

#makes above code readable
>>> response.request.headers['Accept-Encoding']
'gzip, deflate'

#server told us that the content had actually been compressed.  
>>> response.headers['Content-Encoding']
'gzip'

#How do we know if a request we made got a successful response? You can check out the value of Response.ok, which will be True if the response was good, and False if it wasn't.  
>>> response.ok
True

#If the boolean isn’t specific enough for your needs, you can get the HTTP response code that was returned by looking at Response.status_code:  
>>> response.status_code
200

#raises an error message if response.ok is false and prints status code
response = requests.get(url)
if not response.ok:
    raise Exception("GET failed with status code {}".format(response.status_code))
    
#But you don't really need to do that. Requests has us covered here, too! We can use the Response.raise_for_status() method, which will raise an HTTPError exception only if the response wasn’t successful.  
response = requests.get(url)
response.raise_for_status()
