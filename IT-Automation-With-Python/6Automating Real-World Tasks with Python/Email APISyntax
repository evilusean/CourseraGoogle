"""
Built in Python Email API Official Docs:
https://docs.python.org/3/library/email.html
"""
#Using the email.message.EmailMessage class to create an empty email message.
>>> from email.message import EmailMessage
>>> message = EmailMessage()
>>> print(message)

#y adding the sender and recipient to the message and see how that looks.
#We'll define a couple of variables so that we can reuse them later.
>>> sender = "me@example.com"
>>> recipient = "you@example.com"

#now, add them to the From and To fields of the message.
>>> message['From'] = sender
>>> message['To'] = recipient
>>> print(message)
From: me@example.com
To: you@example.com

#add subject line
>>> message['Subject'] = 'Greetings from {} to {}!'.format(sender, recipient)
>>> print(message)
From: me@example.com
To: you@example.com
Subject: Greetings from me@example.com to you@example.com!

#From, To, and Subject are examples of email header fields. They’re key-value pairs of labels and instructions used by email clients and 
#servers to route and display the email. They’re separate from the email's message body, which is the main content of the message.
#Let's go ahead and add a message body!
>>> body = """Hey there!
...
... I'm learning to send emails using Python!"""
>>> message.set_content(body)

#now what does that look like?
>>> print(message)
From: me@example.com
To: you@example.com
Subject: Greetings from me@example.com to you@example.com!
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit

Hey there!

I'm learning to send email using Python!

"""
Adding Email Attachments
"""
#If you know the correct type and subtype of the files you’ll be sending, you can use those values directly. 
#If you don't know, you can use the Python mimetypes module to make a good guess!
>>> import os.path
>>> attachment_path = "/tmp/example.png"
>>> attachment_filename = os.path.basename(attachment_path)
>>> import mimetypes
>>> mime_type, _ = mimetypes.guess_type(attachment_path)
>>> print(mime_type)
image/png

#png is a subtype of the MIME type image
>>> mime_type, mime_subtype = mime_type.split('/', 1)
>>> print(mime_type)
image
>>> print(mime_subtype)
png

#Now, finally! Let's add the attachment to our message and see what it looks like.
>>> with open(attachment_path, 'rb') as ap:
...     message.add_attachment(ap.read(),
...                            maintype=mime_type,
...                            subtype=mime_subtype,
...                            filename=os.path.basename(attachment_path))
... 
>>> print(message)
Content-Type: multipart/mixed; boundary="===============5350123048127315795=="

--===============5350123048127315795==
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit

Hey there!

I'm learning to send email using Python!

--===============5350123048127315795==
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="example.png"
MIME-Version: 1.0

iVBORw0KGgoAAAANSUhEUgAAASIAAABSCAYAAADw69nDAAAACXBIWXMAAAsTAAALEwEAmpwYAAAg
AElEQVR4nO2dd3wUZf7HP8/M9k2nKIJA4BCUNJKgNJWIBUUgEggCiSgeVhA8jzv05Gc5z4KHiqin
eBZIIBDKIXggKIeCRCAhjQAqx4UiCARSt83uzDy/PzazTDZbwy4BnHde+9qZydNn97Pf5/uUIZRS
(...We deleted a bunch of lines here...)
wgAAAABJRU5ErkJggg==

--===============5350123048127315795==--
#The entire message can still be serialized as a text string, including the image that we attached! The email message as a whole has the MIME type "multipart/mixed". Each part of the message has its own MIME type.
#The message body is still there as a "text/plain" part, and the image attachment is a "image/png" part. Cool!

"""
SMTP(Simple Mail Transfer Protocol)
"""
#import package
>>> import smtplib

#With smtplib, we'll create an object that will represent our mail server, and handle sending messages to that server. 
#Let's create a smtplib.SMTP object and try to connect to the local machine.
>>> mail_server = smtplib.SMTP('localhost')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  (...We deleted a bunch of lines here...)
ConnectionRefusedError: [Errno 61] Connection refused
#This error means that there's no local SMTP server configured.

#Most personal email services have instructions for sending email through SMTP;
#just search for the name of your email service and "SMTP connection settings".
#https://docs.python.org/3/library/smtplib.html#smtplib.SMTP
#https://docs.python.org/3/library/smtplib.html#smtplib.SMTP_SSL
# The SMTP class will make a direct SMTP connection, and the SMTP_SSL class will make a SMTP connection over SSL/TLS. Like this:
>>> mail_server = smtplib.SMTP_SSL('smtp.example.com')

#If you want to see the SMTP messages that are being sent back and forth by the smtplib module behind the scenes, you can set the debug level on the SMTP or SMTP_SSL object.
mail_server.set_debuglevel(1)
#authenticate to the SMTP server. Typically, email providers wants us to provide a username and password to connect. Let's put the password into a variable so it's not visible on the screen.
#https://docs.python.org/3/library/getpass.html
>>> import getpass
>>> mail_pass = getpass.getpass('Password? ')
Password?
>>>
#The example above uses the getpass module so that passers-by won't see the password on the screen. Watch out, though; the mail_pass variable is still just an ordinary string!
>>> print(mail_pass)
It'sASecr3t!
#Now that we have the email user and password configured, we can authenticate to the email server using the SMTP object's login method.
#https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.login
>>> mail_server.login(sender, mail_pass)
(235, b'2.7.0 Accepted')

# We're connected and authenticated to the SMTP server. Now, how do we send the message?
#https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.send_message
>>> mail_server.send_message(message)
{}

#The send_message method returns a dictionary of any recipients that weren’t able to receive the message. Our message was delivered successfully, so send_message returned an empty dictionary. Finally, now that the email is sent, let's close the connection to the mail server.
>>> mail_server.quit()


