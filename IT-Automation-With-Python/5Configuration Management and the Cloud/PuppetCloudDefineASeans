Scale:
Have larger impacts with the same amount of effort
Unmanaged:
Manually deploying a server, more servers=more time
Configuration Management Systems:
Configuration management is a systems engineering process for establishing and maintaining consistency of a product's(or fleet) performance
Infrastructure as code(IAC):
When all the configuration necessary to deploy and manage a node in the infrastructure is stored in version control
deployed using automatic tools for the configuration

In puppet the client connects to server and uploads a list of facts to the server, the server then updates itself according to the list of rules
Client=Puppet Agent 
Server=Puppet Master
puppet is consistent, versionable, reliable, repeatable

Resources=The basic unit for modeling the configuration that we want to manage(service, package, file)
Puppet Syntax=Variables, Conditional Statements, Functions
Facts=Variables that represent the charasteristics of the system using Factor(OS/Memory/VM/IP/etc)
manifest=a puppet file with .pp extension
catalog=the list of rules that are generated for one specific computer once the server has evaluated all variables, conditionals, and functions
module=collection of manifests and associated data(contains manfiests, files, templates)
Node=any system where we can run a puppet agent

Fully qualified domain name=sometimes also referred to as an absolute domain name, is a domain name that specifies its exact location in the tree
hierarchy of the Domain Name System (DNS).
Public Key Inrastructure(PKI):used by puppet to form connections between server and clients
Secure Sockets Layer(SSL): used by Puppet/HTTPS as a PKI for verification of identity, encrypted
Certificate Authority(CA): Verifies public and private keys for verification

production= the parts of the infrastructure where a service is executed and served to its users
always test before putting on production machines

idempotent=An action can be performed over and over again without changing the system after the first time the action was performed with
no unintented side effects

test and repair paradigm=actions are taken only if necessary to acheive a goal

stateless=no state being kept inbetween runs of puppet 

Puppet Templates:
Templates are documents that combine code, data, and literal text to produce a final rendered output. The goal of a template is to manage a complicated piece of text with simple inputs.
In Puppet, you'll usually use templates to manage the content of configuration files (via the content attribute of the file resource type).
Templates are written in a templating language, which is specialized for generating text from data. Puppet supports two templating languages:
Embedded Puppet (EPP) uses Puppet expressions in special tags. It's easy for any Puppet user to read, but only works with newer Puppet versions. (â‰¥ 4.0, or late 3.x versions with future parser enabled.)
Embedded Ruby (ERB) uses Ruby code in tags. You need to know a small bit of Ruby to read it, but it works with all Puppet versions.

Software as a Service(SaaS)=when a cloud provider delivers an entire application or program to the customer
Platform as a Service(Paas)=when a cloud provider offers preconfigured platform to the customer
Infrastructure as a Service(Iaas)=when a cloud provider supplies only the bare bones computing experience
Region=Geographical location a service is provided, greater distance= greater latency
Capacity=How much the service can deliver
Scaling=Increasing(Upscaling) or Decreasing(Downscaling) capacity to meet demand
Horizontal Scaling=Adding more nodes
Vertical Scaling=Adding more resources(RAM,CPU, Diskspace) to a node
Automatic Scaling=the service offered by provider will use metrics to automatically increase or decrease the capacity of the system(bill also scales)
Manual Scaling=Scaling done by humans instead of software
Public Cloud=The cloud services provided to you by a third party
Private Cloud=when your company owns the services and infrastructure, whether that;s on-site or in a remote data center
Hybrid Cloud=A mixture of both public and private clouds
Multi Cloud=A mixture of both public/and or private clouds accross vendors

Containers=Applications that are packaged together with their configuration and dependancies
Reference Image=Store the contents of a machine in a reuseable format
Disk Image=Snapshot of a virtual machines disk at a given point in time

Load Balanacer: Ensures that each node receives a balanced number of requests
Round Robin DNS(domain name system):Sends a list of ip addresses connected to website, try's first at top if fails, goes to next.
Dedicated Load Balance Server: proxy server distributes client traffic to servers to ensure consistent, high-performance application delivery.
Sticky Sessions=All requests from the same client always go to the same backend server
GeoDNS/GeoIP=Directs clients to closest geographical load balancer
Content Delivery Network(CDN)=Make up a network of physical hosts that are geographically located as close to the end users as possible

Orchestration=Automated configuration and coordination of complex IT systems and services
Long Lived Node:Contents Need to be updated periodically(storage)
Short Lived Node:Updates need to be made by deleting old instances and deploying new ones(configuration applied at start)

Shared File Systems Solutions=Data can be accessed through network protocols like NFS CFIS
Block Storage=Physical Drive Storage... But in the Cloud!
  Persitent Storage=used for instances that are long lived and need to keep data accross reboots and upgrades
  Ephemeral Storage=used for instances that are only temporary and only need to keep local data while they're running
Object Storage/Blob Storage=Lets you place and retrieve objects in a storage bucket. Each Object has a unique name, no file system.
Need to ask for file by name using an API. Use SQL(uses Query Language) or NoSQL(uses API) format for storage
Blob=Binary Large Object
Throughput=The amount of data that you can read and write in a given amount of time
Input Output Operations Per Second(IOPAS)=Measures how many reads or writes you can do in one second, no matter how much data being accessed
Latency=The amount of time it takes to complete a read or write operation
Hot Data= Accessed frequently and stored in hot storage(Solid State Discs=SSD)
Cold Data=Accessed infrequently and stored in cold storage

Unit Tests Vs Integration Tests
Continuous Integration= Will build and test our code every time theres a change
Continuous Integration Systems:
Travis CI(Github)
Jenkins
By Cloud Providers as a service
Continuous Deployment(CD)=Automatically deploys build 
Test Environment Vs Production Environment(Prod)=Real environment used by users
A/B testing=Some requests are served using one set of code and configuration(A) and other requests are used testing another configuration(B)
Rate Limits=Prevent one service from overloading the whole system
Utilization limits=Cap the total amount of a certain resource that you can provision



