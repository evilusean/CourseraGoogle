#puppet files use the .pp file extension
#all variable names are preceded by a '$' in puppet
#write resource types in lowercase when declaring them, upppercase when calling them

sudo apt install puppet-master #installs locally on a linux machine
sudo puppet apply -v tools.pp #installs any package in the tools manifest -v argument=verbose output, shows progress

sudo apt install puppet-module-puppetlabs-apache #installs a prebuilt ruleset for an apache server in 8 seconds
#new manifest, contents below: webserver.pp
include ::apache
sudo puppet apply -v webserver.pp #installs a prebuilt ruleset for an apache server in 8 seconds

sudo puppet config --section master set autosign true #sets certification to autosign for verification
ssh webserver
sudo puppet config set server ubuntu.example.com #sets server to ubuntu.example.com
sudo puppet agent -v --test #does a test run with verbose output
sudo systemctl enable puppet #systemctl controls what programs are started on boot, enable puppet on boot
sudo systemctl start puppet #start puppet on boot

"""to test puppet syntax before deploying use 'puppet parser validate' command or run --noop parameter or test machines with rspec tests"""
#below is test syntax
describe 'gksu', :type => :class do
  let (:facts) { { 'is_virtual' => 'false' } }
  it { should contain_package{'gksu'}.with_ensure{'latest'} }
end

"""basic syntax for a file class"""
class sysctl {

#makes sure the directory exists, some distros don't have it
file { '/etc/sysctl.d':
  ensure => directory,
 }

}

"""basic syntax for timezone file"""
class timezone {

#explicitly states it will be a file, sets contents to UTC time, replace contents of previous file if it exists
file { '/etc/timezone':
  ensure => file,
  content => "UTC\n",
  replace => true,
 }

}

"""basic syntax for a class with multiple resources: a package, a file and a service. It is best practice to group related resources"""
class ntp {
 ensure => latest,
 }
file {'/etc/ntp.conf':
 source =>'puppet://modules/ntp/ntp.conf'
 replace => true,
}
 service {'ntp':
  enable => true,
  ensure => running,
  }
 }
 
 """updated ntp package above with requires and notify added configuration file
 class ntp {
 ensure => latest,
 }
file {'/etc/ntp.conf':
 source =>'puppet://modules/ntp/ntp.conf'
 replace => true,
 require => Package['ntp'],
 notify => Service['ntp']
}
 service {'ntp':
  enable => true,
  ensure => running,
  }
 }
include ntp

"""basic syntax for a virtual machine using a fact variable removes a package if it is a VM installs if isnt"""
 if $facts['is_virtual']{
  package { 'smartmontools':
    ensure => purged,
    
  }
} else {
 package {'smartmontools':
  ensure => installed,
 }
}


"""basic syntax for OS check"""
if $facts[os][family] == "Debian" {
     package { 'golang':
       ensure => installed,
     }
  }

"""OS check for windows machine info"""
class machine_info {
  if $facts[kernel] == "windows" {
       $info_path = "C:\Windows\Temp\Machine_Info.txt"
   } else {
       $info_path = "/tmp/machine_info.txt"
   }
 file { 'machine_info':
       path => $info_path,
       content => template('machine_info/info.erb'),
   }
}

"""shutdown /r on windows, shutdown -r now on Darwin (macOS), reboot on Linux.
automatically reboots computer regardless of OS after 30 days"""
class reboot {
  if $facts[kernel] == "windows" {
    $cmd = "shutdown /r"
  } elsif $facts[kernel] == "Darwin" {
    $cmd = "shutdown -r now"
  } else {
    $cmd = "reboot"
  }
  if $facts[uptime_days] > 30 {
    exec { 'reboot':
      command => $cmd,
     }
   }
}

"""basic syntax for onlyif idempotent command"""
exec { 'move example file':
 command => 'mv /home/user/example.txt /home/user/Desktop',
 onlyif => 'test -e /home/user/example.txt',
}

"""basic syntax for a node fleet"""
node default {
 class { 'sudo': }
 class { 'ntp':
    servers => ['ntp1.example.com', 'ntp2.example.com']
  }
}

"""basic syntax for apache webserver nodes"""
node webserver.example.com {
 class { 'sudo': }
 class { 'ntp':
    servers => ['ntp1.example.com', 'ntp2.example.com']
  }
  class { 'apache': }
}

"""Below is cloud syntax used for linux apache server debugging from Lab 4"""
#systemctl is a utility for controlling the systemd system and service manager. It comes with a long list of options for different functionality,
#including starting, stopping, restarting, or reloading a daemon.
sudo systemctl status apache2 #checks status
sudo systemctl restart apache2 #restart
#find which processes are using a port
sudo netstat -nlp
#finds which process is using port(python3) using grep
ps -ax | grep python3
#check code from file found
cat /usr/local/bin/jimmytest.py
#kills process found
sudo kill pid 2517
#checks for service named jimmy
sudo systemctl --type=service | grep jimmy
#stops service
sudo systemctl stop jimmytest && sudo systemctl disable jimmytest
#uses netstat to check 
sudo netstat -nlp
#restarts server
sudo systemctl start apache2




